import numpy as np

def readpdb(basefile):
    """
    Reads a pdb file generated by Fateme S. Emami as included in the Interface FF 1.5 database.
    """
    pdbfile = str(basefile) + ".pdb"
    print(pdbfile)
    elements = []
    # coords = np.full((nmol * nat), 0.0)
    coords = []

    with open(pdbfile, "r") as ins:
        for line in ins:
            templist = []
            templist.append(line.strip(" ").split())
            if templist[0][0] == "ATOM":
                elements.append(templist[0][2])
                x = float(templist[0][5])
                y = float(templist[0][6])
                z = float(templist[0][7])
                coords.append([x, y, z])

    coords = np.array(coords)
    return elements, coords


def readpsf(basefile):
    """
    Reads a psf file generated by Fateme S. Emami as included in the Interface FF 1.5 database.
    """
    psffile = str(basefile) + ".psf"
    print(psffile)

    bonds = []
    ff_type = []
    charges = []
    masses = []
    angles = []
    dihedrals = []
    impropers = []
    donors = []
    acceptors = []
    nonbonds = []

    with open(psffile, "r") as psf:
        for line in psf:
            templist = []
            templist.append(line.strip(" ").split())
            # print(templist)
            if '!NATOM' in templist[0]:
                nat = int(templist[0][0])
                print("Number of atoms", nat)
                for i in range(nat):
                    # atomlist = []
                    atomlist = psf.readline().strip(" ").split()
                    ff_type.append(atomlist[5])
                    charges.append(float(atomlist[6]))
                    masses.append(float(atomlist[7]))

            elif '!NBOND:' in templist[0]:
                nbonds = int(templist[0][0])
                if nbonds == 0:
                    print("The structure does not contain any bonds.")
                else:
                    print("Number of bonds", nbonds)
                    bondlist = []
                    bondlist.insert(0, psf.readline().strip(" ").split())
                    bonds_per_line = int(len(bondlist[0][:])/2)
                    lines2read = int(np.ceil(nbonds/bonds_per_line))
                    for nb in range(bonds_per_line):
                        bond1 = int(bondlist[0][nb*2])
                        bond2 = int(bondlist[0][(nb*2)+1])
                        bonds.append([bond1, bond2])

                    for i in range(lines2read-2):
                        bondlist.pop()
                        bondlist.append(psf.readline().strip(" ").split())
                        for nb in range(bonds_per_line):
                            bond1 = int(bondlist[0][nb*2])
                            bond2 = int(bondlist[0][(nb*2)+1])
                            bonds.append([bond1, bond2])

                    bondlist.pop()
                    bondlist.insert(0, psf.readline().strip(" ").split())
                    bonds_per_line = int(len(bondlist[0][:])/2)
                    print("The last line contains", bonds_per_line, "bonds.")
                    for nb in range(bonds_per_line):
                        bond1 = int(bondlist[0][nb*2])
                        bond2 = int(bondlist[0][(nb*2)+1])
                        bonds.append([bond1, bond2])

                    # Convert to integers
                    # for nb in range(len(bonds)):
                        # for j in range(2):


            elif '!NTHETA:' in templist[0]:
                nangle = int(templist[0][0])
                if nangle == 0:
                    print("The structure does not contain any bonding angles.")
                else:
                    print("Number of angles", nangle)
                    thetalist = []
                    thetalist.append(psf.readline().strip(" ").split())
                    thetas_per_line = int(len(thetalist[0][:])/3)
                    lines2read = int(np.ceil(nangle/thetas_per_line))
                    for nth in range(thetas_per_line):
                        angle1 = int(thetalist[0][nth*3])
                        angle2 = int(thetalist[0][(nth*3)+1])
                        angle3 = int(thetalist[0][(nth*3)+2])
                        angles.append([angle1, angle2, angle3])
                        # angles.append(thetalist[0][nth*3:(nth*3)+3])

                    for i in range(lines2read-2):
                        thetalist.pop()
                        thetalist.append(psf.readline().strip(" ").split())
                        for nth in range(thetas_per_line):
                            angle1 = int(thetalist[0][nth*3])
                            angle2 = int(thetalist[0][(nth*3)+1])
                            angle3 = int(thetalist[0][(nth*3)+2])
                            angles.append([angle1, angle2, angle3])
                            # angles.append(thetalist[0][nth*3:(nth*3)+3])

                    thetalist.pop()
                    thetalist.insert(0, psf.readline().strip(" ").split())
                    thetas_per_line = int(len(thetalist[0][:])/3)
                    print("The last line contains", thetas_per_line, "angles.")
                    for nth in range(thetas_per_line):
                        angle1 = int(thetalist[0][nth*3])
                        angle2 = int(thetalist[0][(nth*3)+1])
                        angle3 = int(thetalist[0][(nth*3)+2])
                        angles.append([angle1, angle2, angle3])
                        # angles.append(thetalist[0][nth*3:(nth*3)+3])

            elif '!NPHI:' in templist[0]:
                nphi = int(templist[0][0])
                if nphi == 0:
                    print("The structure does not contain any dihedrals.")
                else:
                    print("Number of dihedrals", nphi)
                    philist = []
                    philist.append(psf.readline().strip(" ").split())
                    phis_per_line = int(len(philist[0][:])/4)
                    lines2read = int(np.ceil(nphi / phis_per_line))
                    for nph in range(phis_per_line):
                        phi1 = int(philist[0][nph*4])
                        phi2 = int(philist[0][nph*4+1])
                        phi3 = int(philist[0][nph*4+2])
                        phi4 = int(philist[0][nph*4+3])
                        dihedrals.append([phi1, phi2, phi3, phi4])
                        # dihedrals.append(philist[0][nph*4:(nph*4)+4])

                    for i in range(lines2read-2):
                        philist.pop()
                        philist.append(psf.readline().strip(" ").split())
                        for nph in range(phis_per_line):
                            phi1 = int(philist[0][nph*4])
                            phi2 = int(philist[0][nph*4+1])
                            phi3 = int(philist[0][nph*4+2])
                            phi4 = int(philist[0][nph*4+3])
                            dihedrals.append([phi1, phi2, phi3, phi4])
                            # dihedrals.append(philist[0][nph*4:(nph*4)+4])

                    philist.pop()
                    philist.append(psf.readline().strip(" ").split())
                    phis_per_line = int(len(philist[0][:])/4)
                    print("The last line contains", phis_per_line, "dihedrals.")
                    for nth in range(phis_per_line):
                        phi1 = int(philist[0][nph*4])
                        phi2 = int(philist[0][nph*4+1])
                        phi3 = int(philist[0][nph*4+2])
                        phi4 = int(philist[0][nph*4+3])
                        dihedrals.append([phi1, phi2, phi3, phi4])
                        # dihedrals.append(philist[0][nph*4:(nph*4)+4])

            elif '!NIMPHI:' in templist[0]:
                nimpr = int(templist[0][0])
                if nimpr == 0:
                    print("The structure does not contain any impropers.")
                print("Number of impropers:", nimpr)
                imprlist = []
                imprlist.append(psf.readline().strip(" ").split())
                imprs_per_line = int(len(imprlist[0][:])/4)
                lines2read = int(np.ceil(nimpr / imprs_per_line))
                for nimp in range(imprs_per_line):
                    impr1 = int(imprlist[0][nimp*4])
                    impr2 = int(imprlist[0][nimp*4+1])
                    impr3 = int(imprlist[0][nimp*4+2])
                    impr4 = int(imprlist[0][nimp*4+3])
                    impropers.append([impr1, impr2, impr3, impr4])
                    # impropers.append(imprlist[0][nimp*4:(nimp*4)+4])

                for i in range(lines2read-2):
                    imprlist.pop()
                    imprlist.append(psf.readline().strip(" ").split())
                    for nimp in range(imprs_per_line):
                        impr1 = int(imprlist[0][nimp*4])
                        impr2 = int(imprlist[0][nimp*4+1])
                        impr3 = int(imprlist[0][nimp*4+2])
                        impr4 = int(imprlist[0][nimp*4+3])
                        impropers.append([impr1, impr2, impr3, impr4])
                        # impropers.append(imprlist[0][nimp*4:(nimp*4)+4])

                imprlist.pop()
                imprlist.append(psf.readline().strip(" ").split())
                imprs_per_line = int(len(imprlist[0][:])/4)
                print("The last line contains", imprs_per_line, "impropers.")
                for nimp in range(imprs_per_line):
                    impr1 = int(imprlist[0][nimp*4])
                    impr2 = int(imprlist[0][nimp*4+1])
                    impr3 = int(imprlist[0][nimp*4+2])
                    impr4 = int(imprlist[0][nimp*4+3])
                    impropers.append([impr1, impr2, impr3, impr4])
                    # impropers.append(imprlist[0][nimp*4:(nimp*4)+4])

            elif '!NDON:' in templist[0]:
                ndon = int(templist[0][0])
                if ndon == 0:
                    print("The structure does not contain any H-bond donors.")

            elif '!NACC:' in templist[0]:
                nacc = int(templist[0][0])
                if nacc == 0:
                    print("The structure does not contain any H-bond acceptors.")

            elif '!NNB' in templist[0]:
                nnonb = int(templist[0][0])
                if nnonb == 0:
                    print("The structure does not contain any non-bonding interactions.")

    return bonds, ff_type, charges, masses, angles, dihedrals, impropers, donors, acceptors, nonbonds